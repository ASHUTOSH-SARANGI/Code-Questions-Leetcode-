import heapq
class Solution(object):
    def swimInWater(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        n = len(grid)
        pq = [(grid[0][0], 0, 0)]
        seen = {(0, 0)}
        max_ = 0
        while pq:
            elev, r, c = heapq.heappop(pq)
            max_ = max(max_, elev)
            if r == n - 1 and c == n - 1:
                return max_
            for nr, nc in ((r - 1, c), (r + 1, c), (r, c - 1), (r, c + 1)):
                if nr < 0 or nc < 0 or nr >= n or nc >= n:
                    continue
                if (nr, nc) in seen:
                    continue

                seen.add((nr, nc))
                heapq.heappush(pq, (grid[nr][nc], nr, nc))
        return max_ 
